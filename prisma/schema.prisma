generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(CREW)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  assignedJobs  CleaningJob[]
  activityLogs  ActivityLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  CREW
  CLIENT
}

model Client {
  id           String   @id @default(cuid())
  name         String
  phone        String?
  email        String?
  companyName  String?
  billingNote  String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vessels Vessel[]

  @@map("clients")
}

model Vessel {
  id             String     @id @default(cuid())
  clientId       String
  name           String
  type           VesselType @default(BOAT)
  length         Float?
  width          Float?
  registrationNo String?
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  client   Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sections VesselSection[]
  jobs     CleaningJob[]

  @@map("vessels")
}

enum VesselType {
  BOAT
  YACHT
  MOTORBOAT
  OTHER
}

model SectionTemplate {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  order       Int     @default(0)

  @@map("section_templates")
}

model VesselSection {
  id          String  @id @default(cuid())
  vesselId    String
  name        String
  description String?
  order       Int     @default(0)
  createdAt   DateTime @default(now())

  vessel    Vessel                     @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  progress  CleaningSectionProgress[]

  @@map("vessel_sections")
}

model CleaningJob {
  id          String       @id @default(cuid())
  vesselId    String
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  assignedTo  String?
  status      JobStatus    @default(DRAFT)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  vessel     Vessel                     @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  assignee   User?                      @relation(fields: [assignedTo], references: [id])
  progress   CleaningSectionProgress[]

  @@map("cleaning_jobs")
}

enum JobStatus {
  DRAFT
  IN_PROGRESS
  DONE
}

model CleaningSectionProgress {
  id                String  @id @default(cuid())
  cleaningJobId     String
  vesselSectionId   String
  percent           Int     @default(0)
  note              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  cleaningJob    CleaningJob     @relation(fields: [cleaningJobId], references: [id], onDelete: Cascade)
  vesselSection  VesselSection   @relation(fields: [vesselSectionId], references: [id], onDelete: Cascade)
  media          Media[]

  @@unique([cleaningJobId, vesselSectionId])
  @@map("cleaning_section_progress")
}

model Media {
  id                         String    @id @default(cuid())
  cleaningSectionProgressId  String
  kind                       MediaKind
  url                        String
  caption                    String?
  createdAt                  DateTime  @default(now())

  progress CleaningSectionProgress @relation(fields: [cleaningSectionProgressId], references: [id], onDelete: Cascade)

  @@map("media")
}

enum MediaKind {
  BEFORE
  AFTER
}

model ActivityLog {
  id         String   @id @default(cuid())
  actorId    String
  entityType String
  entityId   String
  action     String
  payload    Json?
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])

  @@map("activity_logs")
}

model Invite {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("invites")
}